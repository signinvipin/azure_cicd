Setup VM for Azure Classic Pipeline:
------------------------------------

Create vm with arm64 architecture and centOS

Update centOS
sudo yum update -y

install java-17-devel
sudo yum install java-17-devel
Verify 
java --version
javac -version

Install maven

maven download link
https://maven.apache.org/download.cgi

curl -O https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.tar.gz

setup goals
mvn clean package -DskipTests

Install Git
sudo yum install git

Download & setup az-agent
curl -L https://download.agent.dev.azure.com/agent/4.261.0/vsts-agent-linux-arm64-4.261.0.tar.gz -o vsts-agent-linux-arm64-4.261.0.tar.gz

Install Docker
sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl enable docker

add user to docker group
sudo usermod -aG docker azureuser

Setup agent on VM
sudo curl -O 
sudo -zxvf 
sudo ./bin/installdependencies.sh
./config.sh
https://dev.azure.com/third8devops
pool name - az-classic-pool

./run.sh

On portal azure

create cluster and service connection
??

Push docker images to repository as latest and like version 20
--------------------------------------------------------------
Classic Pipeline Setup with $(Build.BuildId)
1. Add Docker Build and Push Task
   Command: buildAndPush
   Tags: $(Build.BuildId),latest
   
#simply put 
#Tags: $(Build.BuildId),latest
#This will push same image with same digest to docker repository


*for 3.2.3 like versioning - change above


> For docker Image version in kubernetes deployment:
-------------------------------------------
####latest tag is typically used in development/testing for convenience.

How to implement using classic pipeline editor?
1.  Make sure to have a Kubernetes service connection configured in Azure DevOps.
   This allows Azure DevOps to run kubectl commands against cluster.
2. After the Docker build & push step (where you push the latest image), add a Command Line or Bash task.
   Go to Pipeline > Tasks > Add Task.
   Search for Command Line or Bash.
   Add the task after your image push step.
3. Configure the Command Line/Bash task (add as next step or inline script):
   Set Script to:
   kubectl rollout restart deployment java-app --namespace default

4. Make sure the task has access to the Kubernetes cluster by:
   Selecting the Kubernetes service connection you created.
   Or by setting up the proper kubeconfig and credentials in the pipeline agent.

5. Save and run the pipeline
   Every time the pipeline runs and pushes the latest image, this step will restart your deployment pods,    forcing Kubernetes to pull the new image.


####Versioned tags are preferred in production for traceability and immutability.

